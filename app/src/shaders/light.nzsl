[nzsl_version("1.0")]
module;

import Light from Common;
import Camera from Common;

struct VertexInput
{
    [location(0)] position: vec3[f32]
}

struct VertexOutput
{
    [builtin(position)] position: vec4[f32]
}

external
{
    [set(0), binding(0)] camera: uniform[Camera],
    [set(1), binding(0)] light: uniform[Light]
}

[entry(vert)]
fn vs_main(input: VertexInput) -> VertexOutput
{
    let scale = 0.2;
    let out: VertexOutput;
    out.position = camera.viewProjMatrix * vec4[f32](input.position.xyz * scale + light.pos, 1.0);

    return out;
}

struct FragOut
{
    [location(0)] color: vec4[f32]
}

[entry(frag)]
fn fs_main(input: VertexOutput) -> FragOut
{
    let out: FragOut;
    out.color = vec4[f32](light.color.rgb, 1.0);
    return out;
}
